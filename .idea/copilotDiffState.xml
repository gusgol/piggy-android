<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="#  Piggy - Personal Expense Tracker&#10;&#10;A modern Android expense tracking application built with Jetpack Compose and Material 3 Design.&#10;&#10;##  Features&#10;&#10;- **Expense Tracking** - Track and categorize your daily expenses&#10;- **Categories Management** - Organize expenses by custom categories&#10;- **Trends Analysis** - Visualize spending patterns and trends&#10;- **User Authentication** - Secure login and user management&#10;- **Material 3 Design** - Modern UI with Material 3 Expressive components&#10;&#10;## ️ Architecture&#10;&#10;This project follows a modular architecture with clean separation of concerns:&#10;&#10;```&#10;Piggy/&#10;├── app/                    # Main application module&#10;├── core/&#10;│   └── designsystem/      # Design system and UI components&#10;└── feature/&#10;    ├── auth/              # Authentication feature&#10;    └── expenses/          # Expenses management feature&#10;```&#10;&#10;### Key Architectural Patterns&#10;&#10;- **Multi-module architecture** for better separation of concerns and build times&#10;- **Feature-based modules** for scalability and maintainability&#10;- **Jetpack Compose** for modern declarative UI&#10;- **Material 3 Expressive** for enhanced visual design&#10;- **Navigation 3** for type-safe navigation&#10;&#10;## ️ Tech Stack&#10;&#10;### Core Technologies&#10;- **Kotlin** - Primary programming language&#10;- **Jetpack Compose** - Modern declarative UI toolkit&#10;- **Material 3 Expressive** - Enhanced Material Design components&#10;&#10;### Architecture Components&#10;- **Navigation 3** - Type-safe navigation between destinations&#10;- **ViewModel** - UI-related data management&#10;- **Lifecycle** - Lifecycle-aware components&#10;&#10;### Build &amp; Dependencies&#10;- **Version Catalogs** - Centralized dependency management&#10;- **Kotlin DSL** - Type-safe build scripts&#10;- **Android Gradle Plugin 8.12.0**&#10;&#10;##  Getting Started&#10;&#10;### Prerequisites&#10;&#10;- Android Studio Hedgehog | 2023.1.1 or newer&#10;- JDK 11 or higher&#10;- Android SDK with minimum API level 34&#10;- Git&#10;&#10;### Setup&#10;&#10;1. **Clone the repository**&#10;   ```bash&#10;   git clone https://github.com/yourusername/piggy-android.git&#10;   cd piggy-android/android&#10;   ```&#10;&#10;2. **Open in Android Studio**&#10;   - Launch Android Studio&#10;   - Select &quot;Open an existing project&quot;&#10;   - Navigate to the `android` folder and open it&#10;&#10;3. **Build the project**&#10;   ```bash&#10;   ./gradlew build&#10;   ```&#10;&#10;4. **Run the app**&#10;   - Connect an Android device or start an emulator&#10;   - Click the &quot;Run&quot; button in Android Studio or use:&#10;   ```bash&#10;   ./gradlew installDebug&#10;   ```&#10;&#10;##  Module Structure&#10;&#10;### App Module (`app/`)&#10;- Main application entry point&#10;- Navigation setup and routing&#10;- Dependency injection configuration&#10;- Main activity and theme setup&#10;&#10;### Core Module (`core/designsystem/`)&#10;- Shared UI components and design system&#10;- Custom themes and styling&#10;- Reusable Compose components&#10;- Material 3 Expressive integration&#10;&#10;### Feature Modules&#10;- **Auth (`feature/auth/`)** - User authentication and account management&#10;- **Expenses (`feature/expenses/`)** - Expense tracking and management&#10;&#10;##  Design System&#10;&#10;The app uses Material 3 Expressive design system with:&#10;- **Dynamic color schemes** - Adapts to user preferences&#10;- **Enhanced typography** - Improved readability and hierarchy&#10;- **Expressive animations** - Smooth and delightful interactions&#10;- **Accessible components** - Built with accessibility in mind&#10;&#10;##  Development&#10;&#10;### Building&#10;```bash&#10;# Debug build&#10;./gradlew assembleDebug&#10;&#10;# Release build&#10;./gradlew assembleRelease&#10;&#10;# Run tests&#10;./gradlew test&#10;```&#10;&#10;### Code Style&#10;- Follow [Kotlin coding conventions](https://kotlinlang.org/docs/coding-conventions.html)&#10;- Use [ktlint](https://ktlint.github.io/) for code formatting&#10;- Write meaningful commit messages&#10;&#10;### Adding New Features&#10;1. Create feature module under `feature/` directory&#10;2. Add module to `settings.gradle.kts`&#10;3. Implement feature using Compose and MVVM pattern&#10;4. Add navigation integration in the app module&#10;&#10;##  Requirements&#10;&#10;- **Minimum SDK**: API 34 (Android 14)&#10;- **Target SDK**: API 36 (Android 15)&#10;- **Compile SDK**: API 36&#10;- **Java Version**: 11&#10;&#10;##  Contributing&#10;&#10;1. Fork the repository&#10;2. Create a feature branch (`git checkout -b feature/amazing-feature`)&#10;3. Commit your changes (`git commit -m 'Add some amazing feature'`)&#10;4. Push to the branch (`git push origin feature/amazing-feature`)&#10;5. Open a Pull Request&#10;&#10;##  License&#10;&#10;This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.&#10;&#10;##  Contact&#10;&#10;- **Author**: Gustavo Goldhardt&#10;- **Email**: your.email@example.com&#10;- **Project Link**: https://github.com/yourusername/piggy-android&#10;&#10;##  Acknowledgments&#10;&#10;- [Material Design 3](https://m3.material.io/) for design guidelines&#10;- [Jetpack Compose](https://developer.android.com/jetpack/compose) team for the amazing UI toolkit&#10;- [Android Developers](https://developer.android.com/) for excellent documentation&#10;&#10;---&#10;&#10;**Happy tracking! **" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    alias(libs.plugins.jetbrains.kotlin.serialization)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.goldhardt.piggy&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.goldhardt.piggy&quot;&#10;        minSdk = 34&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(projects.core.designsystem)&#10;    implementation(projects.feature.expenses)&#10;    implementation(projects.feature.auth)&#10;&#10;    // Core&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;&#10;    // UI + Compose&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;&#10;&#10;    // Nav&#10;    implementation(libs.androidx.navigation3.ui)&#10;    implementation(libs.androidx.navigation3.runtime)&#10;    implementation(libs.androidx.lifecycle.viewmodel.navigation3)&#10;    implementation(libs.androidx.material3.adaptive.navigation3)&#10;    implementation(libs.kotlinx.serialization.core)&#10;&#10;    // Tests&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    alias(libs.plugins.jetbrains.kotlin.serialization)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.goldhardt.piggy&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.goldhardt.piggy&quot;&#10;        minSdk = 34&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(projects.core.designsystem)&#10;    implementation(projects.feature.expenses)&#10;    implementation(projects.feature.auth)&#10;&#10;    // Core&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;&#10;    // UI + Compose&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.androidx.material3.expressive)&#10;&#10;&#10;    // Nav&#10;    implementation(libs.androidx.navigation3.ui)&#10;    implementation(libs.androidx.navigation3.runtime)&#10;    implementation(libs.androidx.lifecycle.viewmodel.navigation3)&#10;    implementation(libs.androidx.material3.adaptive.navigation3)&#10;    implementation(libs.kotlinx.serialization.core)&#10;&#10;    // Tests&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/ui/auth/LoginScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/ui/auth/LoginScreen.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/ui/categories/CategoriesScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/ui/categories/CategoriesScreen.kt" />
              <option name="updatedContent" value="package com.goldhardt.piggy.ui.categories&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;&#10;@Composable&#10;fun CategoriesScreen(&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Box(&#10;        modifier = modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;Categories Screen - Coming Soon&quot;,&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/ui/home/PiggyBottomBar.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/ui/home/PiggyBottomBar.kt" />
              <option name="originalContent" value="package com.goldhardt.piggy.ui.home&#10;&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.outlined.List&#10;import androidx.compose.material.icons.outlined.Info&#10;import androidx.compose.material.icons.outlined.Settings&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import com.goldhardt.piggy.navigation.Screen&#10;&#10;@Composable&#10;fun PiggyBottomBar(&#10;    current: Screen,&#10;    onItemClick: (Screen) -&gt; Unit&#10;) {&#10;    NavigationBar {&#10;        listOf(Screen.Expenses, Screen.Categories, Screen.Trends).forEach { screen -&gt;&#10;            NavigationBarItem(&#10;                selected = screen == current,&#10;                onClick = { onItemClick(screen) },&#10;                icon = {&#10;                    Icon(&#10;                        imageVector = when (screen) {&#10;                            Screen.Expenses -&gt; Icons.AutoMirrored.Outlined.List&#10;                            Screen.Categories -&gt; Icons.Outlined.Settings&#10;                            Screen.Trends -&gt; Icons.Outlined.Info&#10;                            Screen.Login -&gt; TODO()&#10;                        },&#10;                        contentDescription = screen.name&#10;                    )&#10;                },&#10;                label = { Text(screen.name) }&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.goldhardt.piggy.ui.home&#10;&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.outlined.List&#10;import androidx.compose.material.icons.outlined.Info&#10;import androidx.compose.material.icons.outlined.Settings&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import com.goldhardt.piggy.navigation.Screen&#10;&#10;@Composable&#10;fun PiggyBottomBar(&#10;    current: Screen,&#10;    onItemClick: (Screen) -&gt; Unit&#10;) {&#10;    NavigationBar {&#10;        listOf(Screen.Expenses, Screen.Categories, Screen.Trends).forEach { screen -&gt;&#10;            NavigationBarItem(&#10;                selected = screen == current,&#10;                onClick = { onItemClick(screen) },&#10;                icon = {&#10;                    Icon(&#10;                        imageVector = when (screen) {&#10;                            Screen.Expenses -&gt; Icons.AutoMirrored.Outlined.List&#10;                            Screen.Categories -&gt; Icons.Outlined.Settings&#10;                            Screen.Trends -&gt; Icons.Outlined.Info&#10;                            Screen.Login -&gt; TODO()&#10;                        },&#10;                        contentDescription = screen.name&#10;                    )&#10;                },&#10;                label = { Text(screen.name) }&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/ui/trends/TrendsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/ui/trends/TrendsScreen.kt" />
              <option name="updatedContent" value="package com.goldhardt.piggy.ui.trends&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;&#10;@Composable&#10;fun TrendsScreen(&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Box(&#10;        modifier = modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;Trends Screen - Coming Soon&quot;,&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/core/designsystem/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/core/designsystem/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.library)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.goldhardt.designsystem&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        minSdk = 34&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.androidx.material3.expressive)&#10;    implementation(libs.androidx.ui.text.google.fonts)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.library)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.goldhardt.designsystem&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        minSdk = 34&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.androidx.material3.expressive)&#10;    implementation(libs.androidx.ui.text.google.fonts)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/feature/auth/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/feature/auth/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.library)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    alias(libs.plugins.jetbrains.kotlin.serialization)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.goldhardt.auth&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        minSdk = 34&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Core&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;&#10;    // UI + Compose&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;&#10;    // Design System&#10;    implementation(project(&quot;:core:designsystem&quot;))&#10;&#10;    // Nav&#10;    implementation(libs.androidx.navigation3.ui)&#10;&#10;    // Testing&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.library)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    alias(libs.plugins.jetbrains.kotlin.serialization)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.goldhardt.auth&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        minSdk = 34&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Core&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;&#10;    // UI + Compose&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;&#10;    // Design System&#10;    implementation(project(&quot;:core:designsystem&quot;))&#10;&#10;    // Nav&#10;    implementation(libs.androidx.navigation3.ui)&#10;&#10;    // Testing&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/feature/expenses/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/feature/expenses/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.library)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.goldhardt.feature.expenses&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        minSdk = 34&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    // Core&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;&#10;    // UI + Compose&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;&#10;&#10;    // Nav&#10;    implementation(libs.androidx.navigation3.ui)&#10;    implementation(libs.androidx.navigation3.runtime)&#10;    implementation(libs.androidx.lifecycle.viewmodel.navigation3)&#10;    implementation(libs.androidx.material3.adaptive.navigation3)&#10;    implementation(libs.kotlinx.serialization.core)&#10;&#10;    // Tests&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.library)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.goldhardt.feature.expenses&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        minSdk = 34&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    // Core&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;&#10;    // UI + Compose&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;&#10;&#10;    // Nav&#10;    implementation(libs.androidx.navigation3.ui)&#10;    implementation(libs.androidx.navigation3.runtime)&#10;    implementation(libs.androidx.lifecycle.viewmodel.navigation3)&#10;    implementation(libs.androidx.material3.adaptive.navigation3)&#10;    implementation(libs.kotlinx.serialization.core)&#10;&#10;    // Tests&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;agp = &quot;8.12.0&quot;&#10;kotlin = &quot;2.0.21&quot;&#10;coreKtx = &quot;1.16.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.3.0&quot;&#10;espressoCore = &quot;3.7.0&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.2&quot;&#10;activityCompose = &quot;1.10.1&quot;&#10;composeBom = &quot;2025.07.00&quot;&#10;appcompat = &quot;1.6.1&quot;&#10;material = &quot;1.10.0&quot;&#10;uiTextGoogleFonts = &quot;1.8.3&quot;&#10;nav3Core = &quot;1.0.0-alpha01&quot;&#10;lifecycleViewmodelNav3 = &quot;1.0.0-alpha01&quot;&#10;kotlinSerialization = &quot;2.1.21&quot;&#10;kotlinxSerializationCore = &quot;1.8.1&quot;&#10;material3AdaptiveNav3 = &quot;1.0.0&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;androidx-ui-text-google-fonts = { module = &quot;androidx.compose.ui:ui-text-google-fonts&quot;, version.ref = &quot;uiTextGoogleFonts&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;androidx-appcompat = { group = &quot;androidx.appcompat&quot;, name = &quot;appcompat&quot;, version.ref = &quot;appcompat&quot; }&#10;material = { group = &quot;com.google.android.material&quot;, name = &quot;material&quot;, version.ref = &quot;material&quot; }&#10;androidx-navigation3-runtime = { module = &quot;androidx.navigation3:navigation3-runtime&quot;, version.ref = &quot;nav3Core&quot; }&#10;androidx-navigation3-ui = { module = &quot;androidx.navigation3:navigation3-ui&quot;, version.ref = &quot;nav3Core&quot; }&#10;androidx-lifecycle-viewmodel-navigation3 = { module = &quot;androidx.lifecycle:lifecycle-viewmodel-navigation3&quot;, version.ref = &quot;lifecycleViewmodelNav3&quot; }&#10;kotlinx-serialization-core = { module = &quot;org.jetbrains.kotlinx:kotlinx-serialization-core&quot;, version.ref = &quot;kotlinxSerializationCore&quot; }&#10;&#10;#Not needed for now, but useful for future updates&#10;androidx-material3-adaptive-navigation3 = { group = &quot;androidx.compose.material3.adaptive&quot;, name = &quot;adaptive-navigation3&quot;, version.ref = &quot;material3AdaptiveNav3&quot; }&#10;&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;android-library = { id = &quot;com.android.library&quot;, version.ref = &quot;agp&quot; }&#10;jetbrains-kotlin-serialization = { id = &quot;org.jetbrains.kotlin.plugin.serialization&quot;, version.ref = &quot;kotlinSerialization&quot;}&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="[versions]&#10;agp = &quot;8.12.0&quot;&#10;kotlin = &quot;2.0.21&quot;&#10;coreKtx = &quot;1.16.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.3.0&quot;&#10;espressoCore = &quot;3.7.0&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.2&quot;&#10;activityCompose = &quot;1.10.1&quot;&#10;composeBom = &quot;2025.07.00&quot;&#10;appcompat = &quot;1.6.1&quot;&#10;material = &quot;1.10.0&quot;&#10;uiTextGoogleFonts = &quot;1.8.3&quot;&#10;nav3Core = &quot;1.0.0-alpha01&quot;&#10;lifecycleViewmodelNav3 = &quot;1.0.0-alpha01&quot;&#10;kotlinSerialization = &quot;2.1.21&quot;&#10;kotlinxSerializationCore = &quot;1.8.1&quot;&#10;material3AdaptiveNav3 = &quot;1.0.0&quot;&#10;material3Expressive = &quot;1.0.0-alpha03&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;androidx-ui-text-google-fonts = { module = &quot;androidx.compose.ui:ui-text-google-fonts&quot;, version.ref = &quot;uiTextGoogleFonts&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;androidx-material3-expressive = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3-expressive&quot;, version.ref = &quot;material3Expressive&quot; }&#10;androidx-appcompat = { group = &quot;androidx.appcompat&quot;, name = &quot;appcompat&quot;, version.ref = &quot;appcompat&quot; }&#10;material = { group = &quot;com.google.android.material&quot;, name = &quot;material&quot;, version.ref = &quot;material&quot; }&#10;androidx-navigation3-runtime = { module = &quot;androidx.navigation3:navigation3-runtime&quot;, version.ref = &quot;nav3Core&quot; }&#10;androidx-navigation3-ui = { module = &quot;androidx.navigation3:navigation3-ui&quot;, version.ref = &quot;nav3Core&quot; }&#10;androidx-lifecycle-viewmodel-navigation3 = { module = &quot;androidx.lifecycle:lifecycle-viewmodel-navigation3&quot;, version.ref = &quot;lifecycleViewmodelNav3&quot; }&#10;kotlinx-serialization-core = { module = &quot;org.jetbrains.kotlinx:kotlinx-serialization-core&quot;, version.ref = &quot;kotlinxSerializationCore&quot; }&#10;&#10;#Not needed for now, but useful for future updates&#10;androidx-material3-adaptive-navigation3 = { group = &quot;androidx.compose.material3.adaptive&quot;, name = &quot;adaptive-navigation3&quot;, version.ref = &quot;material3AdaptiveNav3&quot; }&#10;&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;android-library = { id = &quot;com.android.library&quot;, version.ref = &quot;agp&quot; }&#10;jetbrains-kotlin-serialization = { id = &quot;org.jetbrains.kotlin.plugin.serialization&quot;, version.ref = &quot;kotlinSerialization&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>