<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/ui/auth/LoginScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/ui/auth/LoginScreen.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/ui/categories/CategoriesScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/ui/categories/CategoriesScreen.kt" />
              <option name="updatedContent" value="package com.goldhardt.piggy.ui.categories&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;&#10;@Composable&#10;fun CategoriesScreen(&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Box(&#10;        modifier = modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;Categories Screen - Coming Soon&quot;,&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/ui/trends/TrendsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/ui/trends/TrendsScreen.kt" />
              <option name="updatedContent" value="package com.goldhardt.piggy.ui.trends&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;&#10;@Composable&#10;fun TrendsScreen(&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Box(&#10;        modifier = modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;Trends Screen - Coming Soon&quot;,&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/core/auth/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/core/auth/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.library)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.hilt.android)&#10;    alias(libs.plugins.kotlin.ksp)&#10;    alias(libs.plugins.google.gms.google.services)&#10;    alias(libs.plugins.google.gms.google.services)&#10;    alias(libs.plugins.google.gms.google.services)&#10;    alias(libs.plugins.google.gms.google.services)&#10;    alias(libs.plugins.google.gms.google.services)&#10;    alias(libs.plugins.google.gms.google.services)&#10;    alias(libs.plugins.google.gms.google.services)&#10;    alias(libs.plugins.google.gms.google.services)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.goldhardt.core.auth&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        minSdk = 34&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;&#10;    // Hilt&#10;    implementation(libs.hilt.android)&#10;    ksp(libs.hilt.compiler)&#10;&#10;    // Firebase&#10;    implementation(platform(libs.firebase.bom))&#10;    implementation(libs.firebase.auth)&#10;&#10;    // Modern Google Sign-In with Credential Manager&#10;    implementation(libs.androidx.credentials)&#10;    implementation(libs.androidx.credentials.play.services.auth)&#10;    implementation(libs.googleid)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.library)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.hilt.android)&#10;    alias(libs.plugins.kotlin.ksp)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.goldhardt.core.auth&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        minSdk = 34&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;&#10;    // Hilt&#10;    implementation(libs.hilt.android)&#10;    ksp(libs.hilt.compiler)&#10;&#10;    // Firebase&#10;    implementation(platform(libs.firebase.bom))&#10;    implementation(libs.firebase.auth)&#10;&#10;    // Modern Google Sign-In with Credential Manager&#10;    implementation(libs.androidx.credentials)&#10;    implementation(libs.androidx.credentials.play.services.auth)&#10;    implementation(libs.googleid)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/core/auth/src/main/java/com/goldhardt/core/auth/FirebaseAuthModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/core/auth/src/main/java/com/goldhardt/core/auth/FirebaseAuthModule.kt" />
              <option name="originalContent" value="package com.goldhardt.core.auth&#10;&#10;import com.google.firebase.auth.FirebaseAuth&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.components.SingletonComponent&#10;import jakarta.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object FirebaseAuthModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideFirebaseAuth(): FirebaseAuth =&#10;        FirebaseAuth.getInstance()&#10;}" />
              <option name="updatedContent" value="package com.goldhardt.core.auth&#10;&#10;import com.goldhardt.core.auth.repository.AuthRepository&#10;import com.goldhardt.core.auth.repository.FirebaseAuthRepository&#10;import com.google.firebase.auth.FirebaseAuth&#10;import dagger.Binds&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.components.SingletonComponent&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object FirebaseAuthModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideFirebaseAuth(): FirebaseAuth =&#10;        FirebaseAuth.getInstance()&#10;}&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;abstract class AuthRepositoryModule {&#10;&#10;    @Binds&#10;    @Singleton&#10;    abstract fun bindAuthRepository(&#10;        firebaseAuthRepository: FirebaseAuthRepository&#10;    ): AuthRepository&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/core/auth/src/main/java/com/goldhardt/core/auth/model/User.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/core/auth/src/main/java/com/goldhardt/core/auth/model/User.kt" />
              <option name="originalContent" value="&#10;data class User(&#10;    val id: String,&#10;    val email: String?,&#10;    val displayName: String?,&#10;    val photoUrl: String?,&#10;    val isEmailVerified: Boolean = false&#10;)" />
              <option name="updatedContent" value="package com.goldhardt.core.auth.model&#10;&#10;data class User(&#10;    val id: String,&#10;    val email: String?,&#10;    val displayName: String?,&#10;    val photoUrl: String?,&#10;    val isEmailVerified: Boolean = false&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/core/data/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/core/data/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.library)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.hilt.android)&#10;    alias(libs.plugins.kotlin.ksp)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.goldhardt.core.data&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        minSdk = 34&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;&#10;    // Hilt&#10;    implementation(libs.hilt.android)&#10;    ksp(libs.hilt.compiler)&#10;&#10;    // Firebase Firestore&#10;    implementation(platform(libs.firebase.bom))&#10;    implementation(libs.firebase.firestore)&#10;&#10;    // Coroutines&#10;    implementation(libs.kotlinx.coroutines.core)&#10;    implementation(libs.kotlinx.coroutines.android)&#10;    implementation(libs.kotlinx.coroutines.play.services)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.library)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.hilt.android)&#10;    alias(libs.plugins.kotlin.ksp)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.goldhardt.core.data&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        minSdk = 34&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;&#10;    // Hilt&#10;    implementation(libs.hilt.android)&#10;    ksp(libs.hilt.compiler)&#10;&#10;    // Firebase Firestore&#10;    implementation(platform(libs.firebase.bom))&#10;    implementation(libs.firebase.firestore)&#10;&#10;    // Coroutines&#10;    implementation(libs.kotlinx.coroutines.core)&#10;    implementation(libs.kotlinx.coroutines.android)&#10;    implementation(libs.kotlinx.coroutines.play.services)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/core/designsystem/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/core/designsystem/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.library)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.goldhardt.designsystem&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        minSdk = 34&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.androidx.ui.text.google.fonts)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.library)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.goldhardt.designsystem&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        minSdk = 34&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.androidx.ui.text.google.fonts)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/feature/auth/src/main/java/com/goldhardt/auth/AuthViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/feature/auth/src/main/java/com/goldhardt/auth/AuthViewModel.kt" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="package com.goldhardt.auth&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.goldhardt.core.auth.model.User&#10;import com.goldhardt.core.auth.repository.AuthRepository&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class LoginViewModel @Inject constructor(&#10;    private val authRepository: AuthRepository&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(LoginUiState())&#10;    val uiState: StateFlow&lt;LoginUiState&gt; = _uiState.asStateFlow()&#10;&#10;    val authState = authRepository.authState()&#10;&#10;    init {&#10;        // Check if user is already signed in&#10;        _uiState.value = _uiState.value.copy(&#10;            currentUser = authRepository.currentUser&#10;        )&#10;    }&#10;&#10;    fun signIn() {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isLoading = true, error = null)&#10;&#10;            val result = authRepository.signIn()&#10;&#10;            if (result.isSuccess) {&#10;                val user = result.getOrThrow()&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    currentUser = user,&#10;                    error = null&#10;                )&#10;            } else {&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    error = result.exceptionOrNull()?.message ?: &quot;Sign in failed&quot;&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    fun signOut() {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isLoading = true)&#10;&#10;            authRepository.signOut()&#10;&#10;            _uiState.value = _uiState.value.copy(&#10;                isLoading = false,&#10;                currentUser = null,&#10;                error = null&#10;            )&#10;        }&#10;    }&#10;&#10;    fun clearError() {&#10;        _uiState.value = _uiState.value.copy(error = null)&#10;    }&#10;}&#10;&#10;data class LoginUiState(&#10;    val isLoading: Boolean = false,&#10;    val currentUser: User? = null,&#10;    val error: String? = null&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;agp = &quot;8.12.0&quot;&#10;kotlin = &quot;2.2.0&quot;&#10;coreKtx = &quot;1.16.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.3.0&quot;&#10;espressoCore = &quot;3.7.0&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.2&quot;&#10;activityCompose = &quot;1.10.1&quot;&#10;composeBom = &quot;2025.07.00&quot;&#10;appcompat = &quot;1.6.1&quot;&#10;material = &quot;1.10.0&quot;&#10;uiTextGoogleFonts = &quot;1.8.3&quot;&#10;nav3Core = &quot;1.0.0-alpha01&quot;&#10;lifecycleViewmodelNav3 = &quot;1.0.0-alpha01&quot;&#10;kotlinSerialization = &quot;2.1.21&quot;&#10;kotlinxSerializationCore = &quot;1.9.0&quot;&#10;hilt = &quot;2.57&quot;&#10;ksp = &quot;2.2.0-2.0.2&quot;&#10;firebaseBom = &quot;34.1.0&quot;&#10;credentials = &quot;1.5.0&quot;&#10;googleid = &quot;1.1.1&quot;&#10;material3 = &quot;1.4.0-alpha14&quot;&#10;googleServices = &quot;4.4.3&quot;&#10;coroutines = &quot;1.10.2&quot;&#10;coil = &quot;2.7.0&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;androidx-ui-text-google-fonts = { module = &quot;androidx.compose.ui:ui-text-google-fonts&quot;, version.ref = &quot;uiTextGoogleFonts&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;androidx-appcompat = { group = &quot;androidx.appcompat&quot;, name = &quot;appcompat&quot;, version.ref = &quot;appcompat&quot; }&#10;material = { group = &quot;com.google.android.material&quot;, name = &quot;material&quot;, version.ref = &quot;material&quot; }&#10;androidx-navigation3-runtime = { module = &quot;androidx.navigation3:navigation3-runtime&quot;, version.ref = &quot;nav3Core&quot; }&#10;androidx-navigation3-ui = { module = &quot;androidx.navigation3:navigation3-ui&quot;, version.ref = &quot;nav3Core&quot; }&#10;androidx-lifecycle-viewmodel-navigation3 = { module = &quot;androidx.lifecycle:lifecycle-viewmodel-navigation3&quot;, version.ref = &quot;lifecycleViewmodelNav3&quot; }&#10;kotlinx-serialization-core = { module = &quot;org.jetbrains.kotlinx:kotlinx-serialization-core&quot;, version.ref = &quot;kotlinxSerializationCore&quot; }&#10;hilt-android = { group = &quot;com.google.dagger&quot;, name = &quot;hilt-android&quot;, version.ref = &quot;hilt&quot; }&#10;hilt-compiler = { group = &quot;com.google.dagger&quot;, name = &quot;hilt-android-compiler&quot;, version.ref = &quot;hilt&quot; }&#10;hilt-navigation-compose = { group = &quot;androidx.hilt&quot;, name = &quot;hilt-navigation-compose&quot;, version = &quot;1.2.0&quot; }&#10;firebase-bom = { group = &quot;com.google.firebase&quot;, name = &quot;firebase-bom&quot;, version.ref = &quot;firebaseBom&quot; }&#10;firebase-auth = { group = &quot;com.google.firebase&quot;, name = &quot;firebase-auth&quot; }&#10;firebase-common = { group = &quot;com.google.firebase&quot;, name = &quot;firebase-common&quot; }&#10;androidx-credentials = { group = &quot;androidx.credentials&quot;, name = &quot;credentials&quot;, version.ref = &quot;credentials&quot; }&#10;androidx-credentials-play-services-auth = { group = &quot;androidx.credentials&quot;, name = &quot;credentials-play-services-auth&quot;, version.ref = &quot;credentials&quot; }&#10;googleid = { group = &quot;com.google.android.libraries.identity.googleid&quot;, name = &quot;googleid&quot;, version.ref = &quot;googleid&quot; }&#10;firebase-firestore = { group = &quot;com.google.firebase&quot;, name = &quot;firebase-firestore&quot; }&#10;kotlinx-coroutines-core = { group = &quot;org.jetbrains.kotlinx&quot;, name = &quot;kotlinx-coroutines-core&quot;, version.ref = &quot;coroutines&quot; }&#10;kotlinx-coroutines-android = { group = &quot;org.jetbrains.kotlinx&quot;, name = &quot;kotlinx-coroutines-android&quot;, version.ref = &quot;coroutines&quot; }&#10;kotlinx-coroutines-play-services = { group = &quot;org.jetbrains.kotlinx&quot;, name = &quot;kotlinx-coroutines-play-services&quot;, version.ref = &quot;coroutines&quot; }&#10;androidx-lifecycle-viewmodel-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-viewmodel-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-lifecycle-runtime-compose = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-compose&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;coil-compose = { group = &quot;io.coil-kt&quot;, name = &quot;coil-compose&quot;, version.ref = &quot;coil&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;android-library = { id = &quot;com.android.library&quot;, version.ref = &quot;agp&quot; }&#10;jetbrains-kotlin-serialization = { id = &quot;org.jetbrains.kotlin.plugin.serialization&quot;, version.ref = &quot;kotlinSerialization&quot; }&#10;hilt-android = { id = &quot;com.google.dagger.hilt.android&quot;, version.ref = &quot;hilt&quot; }&#10;kotlin-ksp = { id = &quot;com.google.devtools.ksp&quot;, version.ref = &quot;ksp&quot; }&#10;google-services = { id = &quot;com.google.gms.google-services&quot;, version.ref = &quot;googleServices&quot; }&#10;" />
              <option name="updatedContent" value="[versions]&#10;agp = &quot;8.12.0&quot;&#10;kotlin = &quot;2.2.0&quot;&#10;coreKtx = &quot;1.16.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.3.0&quot;&#10;espressoCore = &quot;3.7.0&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.2&quot;&#10;activityCompose = &quot;1.10.1&quot;&#10;composeBom = &quot;2025.07.00&quot;&#10;appcompat = &quot;1.6.1&quot;&#10;material = &quot;1.10.0&quot;&#10;uiTextGoogleFonts = &quot;1.8.3&quot;&#10;nav3Core = &quot;1.0.0-alpha01&quot;&#10;lifecycleViewmodelNav3 = &quot;1.0.0-alpha01&quot;&#10;kotlinSerialization = &quot;2.1.21&quot;&#10;kotlinxSerializationCore = &quot;1.9.0&quot;&#10;hilt = &quot;2.57&quot;&#10;ksp = &quot;2.2.0-2.0.2&quot;&#10;firebaseBom = &quot;34.1.0&quot;&#10;credentials = &quot;1.5.0&quot;&#10;googleid = &quot;1.1.1&quot;&#10;material3 = &quot;1.4.0-alpha14&quot;&#10;googleServices = &quot;4.4.3&quot;&#10;coroutines = &quot;1.10.2&quot;&#10;coil = &quot;2.7.0&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;androidx-ui-text-google-fonts = { module = &quot;androidx.compose.ui:ui-text-google-fonts&quot;, version.ref = &quot;uiTextGoogleFonts&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;androidx-appcompat = { group = &quot;androidx.appcompat&quot;, name = &quot;appcompat&quot;, version.ref = &quot;appcompat&quot; }&#10;material = { group = &quot;com.google.android.material&quot;, name = &quot;material&quot;, version.ref = &quot;material&quot; }&#10;androidx-navigation3-runtime = { module = &quot;androidx.navigation3:navigation3-runtime&quot;, version.ref = &quot;nav3Core&quot; }&#10;androidx-navigation3-ui = { module = &quot;androidx.navigation3:navigation3-ui&quot;, version.ref = &quot;nav3Core&quot; }&#10;androidx-lifecycle-viewmodel-navigation3 = { module = &quot;androidx.lifecycle:lifecycle-viewmodel-navigation3&quot;, version.ref = &quot;lifecycleViewmodelNav3&quot; }&#10;kotlinx-serialization-core = { module = &quot;org.jetbrains.kotlinx:kotlinx-serialization-core&quot;, version.ref = &quot;kotlinxSerializationCore&quot; }&#10;hilt-android = { group = &quot;com.google.dagger&quot;, name = &quot;hilt-android&quot;, version.ref = &quot;hilt&quot; }&#10;hilt-compiler = { group = &quot;com.google.dagger&quot;, name = &quot;hilt-android-compiler&quot;, version.ref = &quot;hilt&quot; }&#10;hilt-navigation-compose = { group = &quot;androidx.hilt&quot;, name = &quot;hilt-navigation-compose&quot;, version = &quot;1.2.0&quot; }&#10;firebase-bom = { group = &quot;com.google.firebase&quot;, name = &quot;firebase-bom&quot;, version.ref = &quot;firebaseBom&quot; }&#10;firebase-auth = { group = &quot;com.google.firebase&quot;, name = &quot;firebase-auth&quot; }&#10;firebase-common = { group = &quot;com.google.firebase&quot;, name = &quot;firebase-common&quot; }&#10;androidx-credentials = { group = &quot;androidx.credentials&quot;, name = &quot;credentials&quot;, version.ref = &quot;credentials&quot; }&#10;androidx-credentials-play-services-auth = { group = &quot;androidx.credentials&quot;, name = &quot;credentials-play-services-auth&quot;, version.ref = &quot;credentials&quot; }&#10;googleid = { group = &quot;com.google.android.libraries.identity.googleid&quot;, name = &quot;googleid&quot;, version.ref = &quot;googleid&quot; }&#10;firebase-firestore = { group = &quot;com.google.firebase&quot;, name = &quot;firebase-firestore&quot; }&#10;kotlinx-coroutines-core = { group = &quot;org.jetbrains.kotlinx&quot;, name = &quot;kotlinx-coroutines-core&quot;, version.ref = &quot;coroutines&quot; }&#10;kotlinx-coroutines-android = { group = &quot;org.jetbrains.kotlinx&quot;, name = &quot;kotlinx-coroutines-android&quot;, version.ref = &quot;coroutines&quot; }&#10;kotlinx-coroutines-play-services = { group = &quot;org.jetbrains.kotlinx&quot;, name = &quot;kotlinx-coroutines-play-services&quot;, version.ref = &quot;coroutines&quot; }&#10;androidx-lifecycle-viewmodel-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-viewmodel-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-lifecycle-runtime-compose = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-compose&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;coil-compose = { group = &quot;io.coil-kt&quot;, name = &quot;coil-compose&quot;, version.ref = &quot;coil&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;android-library = { id = &quot;com.android.library&quot;, version.ref = &quot;agp&quot; }&#10;jetbrains-kotlin-serialization = { id = &quot;org.jetbrains.kotlin.plugin.serialization&quot;, version.ref = &quot;kotlinSerialization&quot; }&#10;hilt-android = { id = &quot;com.google.dagger.hilt.android&quot;, version.ref = &quot;hilt&quot; }&#10;kotlin-ksp = { id = &quot;com.google.devtools.ksp&quot;, version.ref = &quot;ksp&quot; }&#10;google-services = { id = &quot;com.google.gms.google-services&quot;, version.ref = &quot;googleServices&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>