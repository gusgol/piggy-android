<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/notifications/SaveExpenseService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/notifications/SaveExpenseService.kt" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="package com.goldhardt.piggy.notifications&#10;&#10;import android.app.Service&#10;import android.content.Intent&#10;import android.os.IBinder&#10;import android.util.Log&#10;import androidx.core.app.NotificationCompat&#10;&#10;class SaveExpenseService : Service() {&#10;    override fun onBind(intent: Intent?): IBinder? = null&#10;&#10;    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {&#10;        // Ensure the channel exists before building a foreground notification (Android O+)&#10;        ExpenseNotificationHelper.ensureChannel(this)&#10;&#10;        // Start as a foreground service to comply with background execution limits&#10;        startForeground(&#10;            FOREGROUND_ID,&#10;            NotificationCompat.Builder(this, ExpenseNotificationHelper.CHANNEL_ID)&#10;                .setSmallIcon(com.goldhardt.piggy.R.mipmap.ic_launcher)&#10;                .setContentTitle(&quot;Saving expenseâ€¦&quot;)&#10;                .setContentText(&quot;Processing your selection&quot;)&#10;                .setOngoing(true)&#10;                .setPriority(NotificationCompat.PRIORITY_MIN)&#10;                .build()&#10;        )&#10;&#10;        val amount = intent?.getDoubleExtra(ExpenseNotificationHelper.Extras.KEY_AMOUNT, Double.NaN)&#10;        val description = intent?.getStringExtra(ExpenseNotificationHelper.Extras.KEY_DESCRIPTION)&#10;        if (amount != null &amp;&amp; !amount.isNaN() &amp;&amp; !description.isNullOrBlank()) {&#10;            // TODO: integrate with :core:data to persist the expense&#10;            Log.i(TAG, &quot;Saving expense: $description - $amount&quot;)&#10;        } else {&#10;            Log.w(TAG, &quot;Missing data; amount=$amount, description=$description&quot;)&#10;        }&#10;&#10;        // Done: remove foreground state and stop&#10;        stopForeground(STOP_FOREGROUND_REMOVE)&#10;        stopSelf(startId)&#10;        return START_NOT_STICKY&#10;    }&#10;&#10;    companion object {&#10;        private const val TAG = &quot;SaveExpenseService&quot;&#10;        private const val FOREGROUND_ID = 0xED51 // arbitrary stable ID&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/ui/auth/LoginScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/ui/auth/LoginScreen.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/ui/categories/CategoriesScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/ui/categories/CategoriesScreen.kt" />
              <option name="updatedContent" value="package com.goldhardt.piggy.ui.categories&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;&#10;@Composable&#10;fun CategoriesScreen(&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Box(&#10;        modifier = modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;Categories Screen - Coming Soon&quot;,&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/ui/home/TrendsScreenWrapper.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/ui/home/TrendsScreenWrapper.kt" />
              <option name="updatedContent" value="package com.goldhardt.piggy.ui.home&#10;&#10;import androidx.compose.runtime.Composable&#10;&#10;@Composable&#10;fun TrendsScreen() {&#10;    com.goldhardt.feature.trends.TrendsScreen()&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/ui/trends/TrendsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/goldhardt/piggy/ui/trends/TrendsScreen.kt" />
              <option name="updatedContent" value="package com.goldhardt.piggy.ui.trends&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;&#10;@Composable&#10;fun TrendsScreen(&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Box(&#10;        modifier = modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;Trends Screen - Coming Soon&quot;,&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/core/auth/src/main/java/com/goldhardt/core/auth/FirebaseAuthModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/core/auth/src/main/java/com/goldhardt/core/auth/FirebaseAuthModule.kt" />
              <option name="originalContent" value="package com.goldhardt.core.auth&#10;&#10;import com.google.firebase.auth.FirebaseAuth&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.components.SingletonComponent&#10;import jakarta.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object FirebaseAuthModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideFirebaseAuth(): FirebaseAuth =&#10;        FirebaseAuth.getInstance()&#10;}" />
              <option name="updatedContent" value="package com.goldhardt.core.auth&#10;&#10;import com.goldhardt.core.auth.repository.AuthRepository&#10;import com.goldhardt.core.auth.repository.FirebaseAuthRepository&#10;import com.google.firebase.auth.FirebaseAuth&#10;import dagger.Binds&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.components.SingletonComponent&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object FirebaseAuthModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideFirebaseAuth(): FirebaseAuth =&#10;        FirebaseAuth.getInstance()&#10;}&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;abstract class AuthRepositoryModule {&#10;&#10;    @Binds&#10;    @Singleton&#10;    abstract fun bindAuthRepository(&#10;        firebaseAuthRepository: FirebaseAuthRepository&#10;    ): AuthRepository&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/feature/auth/src/main/java/com/goldhardt/auth/AuthViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/feature/auth/src/main/java/com/goldhardt/auth/AuthViewModel.kt" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="package com.goldhardt.auth&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.goldhardt.core.auth.model.User&#10;import com.goldhardt.core.auth.repository.AuthRepository&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class LoginViewModel @Inject constructor(&#10;    private val authRepository: AuthRepository&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(LoginUiState())&#10;    val uiState: StateFlow&lt;LoginUiState&gt; = _uiState.asStateFlow()&#10;&#10;    val authState = authRepository.authState()&#10;&#10;    init {&#10;        // Check if user is already signed in&#10;        _uiState.value = _uiState.value.copy(&#10;            currentUser = authRepository.currentUser&#10;        )&#10;    }&#10;&#10;    fun signIn() {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isLoading = true, error = null)&#10;&#10;            val result = authRepository.signIn()&#10;&#10;            if (result.isSuccess) {&#10;                val user = result.getOrThrow()&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    currentUser = user,&#10;                    error = null&#10;                )&#10;            } else {&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    error = result.exceptionOrNull()?.message ?: &quot;Sign in failed&quot;&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    fun signOut() {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isLoading = true)&#10;&#10;            authRepository.signOut()&#10;&#10;            _uiState.value = _uiState.value.copy(&#10;                isLoading = false,&#10;                currentUser = null,&#10;                error = null&#10;            )&#10;        }&#10;    }&#10;&#10;    fun clearError() {&#10;        _uiState.value = _uiState.value.copy(error = null)&#10;    }&#10;}&#10;&#10;data class LoginUiState(&#10;    val isLoading: Boolean = false,&#10;    val currentUser: User? = null,&#10;    val error: String? = null&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>